# Stream NFT Contracts - .env.example
# Copy to .env and fill in values as needed.
#
# This file documents all environment variables used by script/Deploy.s.sol
# and other scripts. Values here are SAMPLE defaults; adjust for your network.

# --- Core ---
# RPC_URL is used by forge when running scripts, not read by Deploy.s.sol itself.
RPC_URL=
# Private key used for deployment and as the owner of deployed contracts.
# IMPORTANT: keep your real key secure; do not commit a real .env file.
PRIVATE_KEY=0xYOUR_PRIVATE_KEY

# Platform treasury and fee
PLATFORM_TREASURY=0x0000000000000000000000000000000000000001
PLATFORM_FEE_BPS=200

# Base URI used by AccessPass and sample collection deployments
BASE_URI=ipfs://base/

# --- Deployment mode selection (fresh vs. attach) ---
# The deploy script determines fresh deployment vs. attach-only mode as:
# freshDeploy = (REGISTRY_ADDRESS == 0 || SUBSCRIPTION_MANAGER_ADDRESS == 0)
# - If either is zero/unset: fresh deploy of missing components + owner-only wiring
# - If both non-zero: attach to existing contracts and skip owner-only wiring
REGISTRY_ADDRESS=0x0000000000000000000000000000000000000000
SUBSCRIPTION_MANAGER_ADDRESS=0x0000000000000000000000000000000000000000

# --- AccessPass options (freshDeploy only) ---
# If ACCESS_PASS_ADDRESS is zero, a new AccessPass will be deployed and wired.
# If non-zero, the script will wire the given AccessPass into SubscriptionManager.
ACCESS_PASS_ADDRESS=0x0000000000000000000000000000000000000000
# Optional resolver for dynamic tokenURI logic on AccessPass
ACCESS_PASS_RESOLVER=0x0000000000000000000000000000000000000000

# --- Creator registration (freshDeploy only) ---
# If set (non-zero), the owner will be registered in CreatorRegistry with this payout address.
CREATOR_PAYOUT=0x0000000000000000000000000000000000000000

# --- Token allowlist and oracle defaults (freshDeploy only) ---
# Optionally allowlist a payment token for subscriptions.
ALLOW_TOKEN=0x0000000000000000000000000000000000000000
# Optionally set a default oracle for a token (or ETH with 0x000...0000)
DEFAULT_TOKEN=0x0000000000000000000000000000000000000000
DEFAULT_ORACLE=0x0000000000000000000000000000000000000000
# Decimals for DEFAULT_TOKEN (e.g., 18 for ETH/most ERC20s, 6 for USDC)
DEFAULT_TOKEN_DECIMALS=18

# --- Sample tier creation (freshDeploy only) ---
# Create a fixed-price sample tier for the owner if both price and duration are > 0
SAMPLE_FIXED_PRICE_WEI=0
SAMPLE_FIXED_DURATION=0
# Tier metadata URI (free-form; use ipfs://, ar://, http(s)://, or custom scheme)
SAMPLE_TIER_METADATA=tier://sample

# Create an oracle-priced sample tier for the owner if both USD price and duration are > 0
# usdPrice is 1e8 scaled (e.g., $1.00 == 100000000)
SAMPLE_ORACLE_USD_PRICE=0
SAMPLE_ORACLE_DURATION=0
# Payment token and Chainlink-like aggregator for token/USD
SAMPLE_ORACLE_PAYMENT_TOKEN=0x0000000000000000000000000000000000000000
SAMPLE_ORACLE_AGGREGATOR=0x0000000000000000000000000000000000000000
# Decimals of the payment token (e.g., 18 for WETH, 6 for USDC)
SAMPLE_ORACLE_TOKEN_DECIMALS=0

# --- Notes ---
# - Use 0x0000000000000000000000000000000000000000 to represent ETH where a token address is required.
# - Chainlink aggregator answers are expected with 8 decimals (1e8). The script/contract compute:
#     amount = (usdPrice[1e8] * 10^tokenDecimals) / answer[1e8]
# - When attaching to existing deployments, owner-only wiring is intentionally skipped to avoid permission issues.
